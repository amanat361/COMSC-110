Name: Samin Amanat
Course: COMSC-110-1021

1. Objective
Enter a line of text then encode the text to the next character in the ASCII code

2. Requirements
INPUT:
Input file to encode with text in the file

PROCESSING: the objective broken down into major parts, use it as checklist
Get file name from user
Open input file
Open output file
For each character in the file, bump it up one in the ASCII code (A - B, 1 - 2, etc.)
Output encoded text to output file
Output encoded text to the console
Close both files

OUTPUT:
Output prompt with user instructions:
  The user should make a file
  Put text on the file
  What the encoded file will be
Output encoded text to output file
Output encoded text to the console

DATA: data item name, type of data, units of measure, valid values, formatting
[string] objective - "Enter a line of text then encode the text to the next character in the ASCII code."
[string] text - text inputted by the user in their text file
[string] input file - the name of the file that is inputted by the user
[string] output file - the name of the file that is outputted by the user
[integer] loop index - a letter like 'c' to be used in a for loop
[ifstream] fin - a variable to hold the value of an inputted file (reading from a file)
[ofstream] fout - a variable to hold the value of an outputting file (writing to a file)

3. Instructions
10 Output user introduction and instructions
20 Ask user for name of input file
25 Input name of input file
30 Open file for input
35 Check if file is good
40 Open file for output
45 Check if file is good
50 If there is no text in the input file, skip to instruction 100
60 Get a line of text from input file
70 For each character in the line of text, move that character ASCII code + 1
80 Output encoded text to output file
90 Output encoded text to the console
100 If EOF skip to instruction 110 else skip to instruction 60
110 Close files

4. Test Cases

Test Case #1: simplest test case

	What is being tested: Encoding "Hello, World!"
	Input values if any: encode.txt with "Hello, World!" written on its first line
	Expected results:

Output user introduction
Output instructions:

Please make a text file that you would like to be encoded.
Put your text that you would like to be encoded inside of that file.
The encoded file will be created as "secret.txt" and also outputted to the console.
When you are done, push enter, the program will wait...

User pushes enter

Output prompt for filename:

What is the name of the file to be encoded? (should end with .txt):

User input's "encode.txt" which is a file that has "Hello, World!" written on the first line

Output: Ifmmp-!Xpsme"

Test Case #2: specific scenario

	What is being tested: encoding multiple lines
	Input values if any:
	"Hello, World!"
	"Do multiple lines work?"
	Expected results:

Output user introduction
Output instructions:

Please make a text file that you would like to be encoded.
Put your text that you would like to be encoded inside of that file.
The encoded file will be created as "secret.txt" and also outputted to the console.
When you are done, push enter, the program will wait...

User pushes enter

Output prompt for filename:

What is the name of the file to be encoded? (should end with .txt):

User input's "encode.txt" which is a file that has "Hello, World!" written on the first line and "Do multiple lines work?" written on the second line.

Output:
Ifmmp-!Xpsme"
Ep!nvmujqmf!mjoft!xpsl@