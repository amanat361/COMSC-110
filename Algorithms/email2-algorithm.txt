Name: Samin Amanat
Course: COMSC-110-1021

1. Objective
A utility for copying emails from one file to another

2. Requirements
INPUT:
iFileName - the user should input the name of the input file, or push enter for default
oFileName - the user should input the name of the output file, or push enter for default
enterToContinue - the user should push enter to continue after verifying that the files are correct

PROCESSING: the objective broken down into major parts, use it as checklist
user introduction
prompt user for input filename
check if filename is valid or enter key
prompt user for output filename
check if filename is valid or enter key
output filenames confirmation (even though the user can't input them again) and user pushes enter to continue
process every line in the input file, output line for every @ in line

OUTPUT:
output user introduction
output a prompts to the console for filenames
output variable error messages if filenames are invalid
output filename confirmations
output a prompt to press ENTER key to continue
output lines in the file for every @ in the lines

DATA: data item name, type of data, units of measure, valid values, formatting
-----
MAIN
-----
[text] objective = "A utility for copying emails from one file to another" (program objective)
[text] dFileName = "fileContainingEmails.txt" (the default file name)
[text] iFileName (the input filename inputted by the user if not default)
[text] oFileName (the output filename inputted by the user if not default)
[text] confirmation (for the user to push enter to continue after confirming the filenames)
[input file] fin (for getting lines from input file)
-----
GETFILENAME
-----
[integer] c (loop index)
[true / false] inputValid = true ()whether the input is valid or not)
[text] fileName (file name passed to main)
[text] defaultFile = dFileName (the default file name passed from main)
[text] inOrOut = inputOrOutput (whether this is for the input or output file)
-----
PROCESSLINE
-----
[integer] c (loop index)
[line] passed through from main

3. Instructions
-----
MAIN
-----
10 Output user introduction
20 Get input filename by passing dFileName and "input" to getFileName function = iFileName
30 If filename is 0 characters, enter must have been pushed, so default filename is used
30a iFileName = dFileName
30b dFileName = "copyPasteMyEmails.txt"
40 Else, dFileName = iFileName (iFileName is not touched and dFileName is changed)
50 Get output filename by passing dFileName and "output" to getFileName function = oFileName
60 If filename is 0 characters, enter must have been pushed, so default filename is used
60a oFileName = dFileName
70 Output confirmation message - "File name confirmation:"
80 Output "Input file: "
90 Output iFileName
100 Output "Output file: "
110 Output oFileName
120 Output prompt to continue (user can't change file names after this) - "Press enter to continue with the program..."
130 Input confirmation (no matter what they press, the program will just continue as long as they push enter)
140 Open file for input
150 Check if file is good
160 Send each line to processLine function until no more lines in file
170 Close input file
200 DONE
-----
GETFILENAME
-----
10 inputValid = true
20 output "Enter "
30 output inOrOut
40 output " filename [enter for default: "
50 output dFileName
60 output "]: "
70 input fileName
80 if fileName length is zero inputValid is true (they pushed enter for default)
90 if fileName length is between 0 and 5 inputValid is false
90a output "This filename is invalid because it is too short. Perhaps you forgot the file extention."
100 if filename starts with a space inputValid is not true
100a output "This filename is invalid because it starts with a space."
110 if filename starts with a period inputValid is not true
110a output "This filename is invalid because it starts with a period."
120 if last four characters in filename are not ".txt" then inputValid is not true
120a output "This filename is invalid because it does not end with ".txt""
130 if fileName contains any special characters " * : < > ? / or | then inputValid is not true
130a output "This filename is invalid because it contains a special character " * : < > ? / or |"
140 if inputValid = false go back to instruction 10
150 return fileName to main
-----
PROCESSLINE
-----
10 c = 0
15 line passed from main
20 if c >= length of line then skip to instruction 60
30 if index c of line = @ then output lien
40 c = c + 1
50 go back to instruction 20
60 DONE

4. Test Cases

Test Case #1:

What is being tested: using both defaults for input and output where they don't exist

Enter input filename [enter for default: fileContainingEmails.txt]:
Enter output filename [enter for default: copyPasteMyEmails.txt]:

File name confirmation:
Input file: fileContainingEmails.txt
Output file: copyPasteMyEmails.txt

Press enter to continue with the program...

Program terminates because fileContainingEmails.txt does not exist

What is happening:

-----
MAIN
-----
10 Output user introduction
20 Get input filename by passing dFileName and "input" to getFileName function = iFileName
-----
GETFILENAME
-----
10 inputValid = true
20 output "Enter "
30 output inOrOut
40 output " filename [enter for default: "
50 output dFileName
60 output "]: "
"Enter input filename [enter for default: "fileContainingEmails.txt"]: "
70 input fileName
User pushes enter
80 if fileName length is zero inputValid is true (they pushed enter for default)
user pushed enter so inputValid is true. since a condition has been met, the other statements don't run
150 return fileName to main
-----
MAIN
-----
iFileName = "" (enter key with no text)
30 If filename is 0 characters, enter must have been pushed, so default filename is used
yes, enter key was pressed
30a iFileName = dFileName
iFileName = "fileContainingEmails.txt"
30b dFileName = "copyPasteMyEmails.txt"
dFileName = "copyPasteMyEmails.txt"
40 Else, dFileName = iFileName (iFileName is not touched and dFileName is changed)
the if condition was met so this does not run
50 Get output filename by passing dFileName and "output" to getFileName function = oFileName
-----
GETFILENAME
-----
10 inputValid = true
20 output "Enter "
30 output inOrOut
40 output " filename [enter for default: "
50 output dFileName
60 output "]: "
"Enter output filename [enter for default: "copyPasteMyEmails.txt"]: "
70 input fileName
User pushes enter
80 if fileName length is zero inputValid is true (they pushed enter for default)
user pushed enter so inputValid is true. since a condition has been met, the other statements don't run
150 return fileName to main
-----
MAIN
-----
60 If filename is 0 characters, enter must have been pushed, so default filename is used
yes, enter key was pressed
60a oFileName = dFileName
oFileName = "copyPasteMyEmails.txt"
70 Output confirmation message - "File name confirmation:"
80 Output "Input file: "
90 Output iFileName
"Input file: fileContainingEmails.txt"
100 Output "Output file: "
110 Output oFileName
"Output file: copyPasteMyEmails.txt"
120 Output prompt to continue (user can't change file names after this) - "Press enter to continue with the program..."
"Press enter to continue..."
130 Input confirmation (no matter what they press, the program will just continue as long as they push enter)
user presses enter
140 Open file for input
150 Check if file is good
file is not good so program does not continue

----------
----------

Test Case #2:

What is being tested: using both defaults for input and output where the input file contains two lines:
@@ Output this twice
Output this once@

Enter input filename [enter for default: fileContainingEmails.txt]:
Enter output filename [enter for default: copyPasteMyEmails.txt]:

File name confirmation:
Input file: fileContainingEmails.txt
Output file: copyPasteMyEmails.txt

Press enter to continue with the program...

@@ Output this twice
Output this once@

What is happening:

-----
MAIN
-----
10 Output user introduction
20 Get input filename by passing dFileName and "input" to getFileName function = iFileName
-----
GETFILENAME
-----
10 inputValid = true
20 output "Enter "
30 output inOrOut
40 output " filename [enter for default: "
50 output dFileName
60 output "]: "
"Enter input filename [enter for default: "fileContainingEmails.txt"]: "
70 input fileName
User pushes enter
80 if fileName length is zero inputValid is true (they pushed enter for default)
user pushed enter so inputValid is true. since a condition has been met, the other statements don't run
150 return fileName to main
-----
MAIN
-----
iFileName = "" (enter key with no text)
30 If filename is 0 characters, enter must have been pushed, so default filename is used
yes, enter key was pressed
30a iFileName = dFileName
iFileName = "fileContainingEmails.txt"
30b dFileName = "copyPasteMyEmails.txt"
dFileName = "copyPasteMyEmails.txt"
40 Else, dFileName = iFileName (iFileName is not touched and dFileName is changed)
the if condition was met so this does not run
50 Get output filename by passing dFileName and "output" to getFileName function = oFileName
-----
GETFILENAME
-----
10 inputValid = true
20 output "Enter "
30 output inOrOut
40 output " filename [enter for default: "
50 output dFileName
60 output "]: "
"Enter output filename [enter for default: "copyPasteMyEmails.txt"]: "
70 input fileName
User pushes enter
80 if fileName length is zero inputValid is true (they pushed enter for default)
user pushed enter so inputValid is true. since a condition has been met, the other statements don't run
150 return fileName to main
-----
MAIN
-----
60 If filename is 0 characters, enter must have been pushed, so default filename is used
yes, enter key was pressed
60a oFileName = dFileName
oFileName = "copyPasteMyEmails.txt"
70 Output confirmation message - "File name confirmation:"
80 Output "Input file: "
90 Output iFileName
"Input file: fileContainingEmails.txt"
100 Output "Output file: "
110 Output oFileName
"Output file: copyPasteMyEmails.txt"
120 Output prompt to continue (user can't change file names after this) - "Press enter to continue with the program..."
"Press enter to continue..."
130 Input confirmation (no matter what they press, the program will just continue as long as they push enter)
user presses enter
140 Open file for input
150 Check if file is good
file is good
160 Send each line to processLine function until no more lines in file
first line is @@Output this twice ---> sent to processLine
-----
PROCESSLINE
-----
10 c = 0
15 line passed from main
line = @@ Output this twice

20 if c >= length of line then skip to instruction 60
length of line is 16 and 0 < 16

30 if index c of line = @ then output lien
the 0th index of the line is @
output "@@ Output this twice"
total output:
"@@ Output this twice"

40 c = c + 1
c = 0 + 1
c = 1

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 16 and 1 < 16

30 if index c of line = @ then output lien
the 1st index of the line is @
output "@@ Output this twice"
total output:
"@@ Output this twice"
"@@ Output this twice"

40 c = c + 1
c = 1 + 1
c = 2

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 16 and 2 < 16

30 if index c of line = @ then output lien
the 2nd index of the line is a space
don't output anything
total output:
"@@ Output this twice"
"@@ Output this twice"

this keeps going until the 15th index is reached (the 16th character) which is 'e'
since nothing after the first two characters are the @ symbol, nothing gets outputted

the total output remains as:
"@@ Output this twice"
"@@ Output this twice"
void function so nothing is returned to main

-----
MAIN
-----
Send next line to processLine

-----
PROCESSLINE
-----
10 c = 0
15 line passed from main
line = Output this once@

20 if c >= length of line then skip to instruction 60
length of line is 17 and 0 < 17

30 if index c of line = @ then output lien
the 0th index of the line is 'O'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 0 + 1
c = 1

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 1 < 17

30 if index c of line = @ then output lien
the 1st index of the line is 'u'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 1 + 1
c = 2

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 2 < 17

30 if index c of line = @ then output lien
the 2nd index of the line is 't'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 2 + 1
c = 3

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 3 < 17

30 if index c of line = @ then output lien
the 3rd index of the line is 'p'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 3 + 1
c = 4

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 4 < 17

30 if index c of line = @ then output lien
the 4th index of the line is 'u'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 4 + 1
c = 5

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 5 < 17

30 if index c of line = @ then output lien
the 5th index of the line is 't'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 5 + 1
c = 6

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 6 < 17

30 if index c of line = @ then output lien
the 6th index of the line is a space
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 6 + 1
c = 7

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 7 < 17

30 if index c of line = @ then output lien
the 7th index of the line is 't'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 7 + 1
c = 8

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 8 < 17

30 if index c of line = @ then output lien
the 8th index of the line is 'h'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 8 + 1
c = 9

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 9 < 17

30 if index c of line = @ then output lien
the 9th index of the line is 'i'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 9 + 1
c = 10

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 10 < 17

30 if index c of line = @ then output lien
the 10th index of the line is 's'
output nothing
total output:
(nothing yet)

40 c = c + 1
c = 10 + 1
c = 11

this keeps going until the 16th index, or the 17th character

total output:
(nothing yet)

20 if c >= length of line then skip to instruction 60
length of line is 17 and 16 < 17

30 if index c of line = @ then output lien
the 16th index of the line is @
output the line
total output:
Output this once@

40 c = c + 1
c = 16 + 1
c = 17

50 go back to instruction 20
20 if c >= length of line then skip to instruction 60
length of line is 17 and 17 = 17
skip to instruction 60
60 DONE
-----
MAIN
-----
170 Close input file
200 DONE

----------
----------

Test case #3:

What is being tested: input file 0.txt:

Nothing
here
...
Should say "no emails"
@
@x
x@
x@x
(blank line)
(blank line)

What will happen:

Enter input filename [enter for default: fileContainingEmails.txt]: 0.txt
Enter output filename [enter for default: copyPasteMyEmails.txt]: (enter)

File name confirmation:
Input file: 0.txt
Output file: 0.txt

Press enter to continue with the program...
@
@x
x@
x@x

----------
----------
Test case #4:

What is being tested: input file 6.txt:

AWestcott@dvc.edu; 
BOsborne@dvc.edu; 
CDuke@dvc.edu; 
CHaynes@dvc.edu; 
CLokke@dvc.edu; 
CWilcox@dvc.edu; 
DBach@dvc.edu; 
DEckel@dvc.edu; 
DJohnson@dvc.edu; 
DPrapave@dvc.edu; 
EFreiden@dvc.edu; 
GKhaja@dvc.edu; 
HaKresch@dvc.edu; 
HKow@dvc.edu; 
JBrecha@dvc.edu; 
JeSmith@dvc.edu; 
JMagee@dvc.edu; 
JMoran@dvc.edu; 
KEdwards@dvc.edu; 
KKeating@dvc.edu; 
KStallin@dvc.edu; 
LFratessa@dvc.edu; 
LKnight@dvc.edu; 
LLin@dvc.edu; 
MCollazo@dvc.edu; 
MReynold@dvc.edu; 
PFarmer@dvc.edu; 
PLeitner@dvc.edu; 
PLou@dvc.edu; 
PWillett@dvc.edu; 
RBurns@dvc.edu; 
RWestlake@dvc.edu; 
SCMiller@dvc.edu; 
SMoore@dvc.edu; 
SNeedham@dvc.edu; 
SSarkis@dvc.edu; 
TLevy@dvc.edu; 
TMowry@dvc.edu; 
TNirgiotis@dvc.edu; 
WParks@dvc.edu

What will happen:

Enter input filename [enter for default: fileContainingEmails.txt]: 6.txt

Enter output filename [enter for default: 6.txt]: whatever.txt


File name confirmation:
Input file: 6.txt
Output file: whatever.txt

Press enter to continue with the program...
AWestcott@dvc.edu;
BOsborne@dvc.edu;
CDuke@dvc.edu;
CHaynes@dvc.edu;
CLokke@dvc.edu;
CWilcox@dvc.edu;
DBach@dvc.edu;
DEckel@dvc.edu;
DJohnson@dvc.edu;
DPrapave@dvc.edu;
EFreiden@dvc.edu;
GKhaja@dvc.edu;
HaKresch@dvc.edu;
HKow@dvc.edu;
JBrecha@dvc.edu;
JeSmith@dvc.edu;
JMagee@dvc.edu;
JMoran@dvc.edu;
KEdwards@dvc.edu;
KKeating@dvc.edu;
KStallin@dvc.edu;
LFratessa@dvc.edu;
LKnight@dvc.edu;
LLin@dvc.edu;
MCollazo@dvc.edu;
MReynold@dvc.edu;
PFarmer@dvc.edu;
PLeitner@dvc.edu;
PLou@dvc.edu;
PWillett@dvc.edu;
RBurns@dvc.edu;
RWestlake@dvc.edu;
SCMiller@dvc.edu;
SMoore@dvc.edu;
SNeedham@dvc.edu;
SSarkis@dvc.edu;
TLevy@dvc.edu;
TMowry@dvc.edu;
TNirgiotis@dvc.edu;
WParks@dvc.edu

----------
----------

Test case #5:

What is being tested: all of the invalid input cases

What will happen:

Enter input filename [enter for default: fileContainingEmails.txt]: file
This filename is invalid because it is too short. Perhaps you forgot the file extention.

Enter input filename [enter for default: fileContainingEmails.txt]:  .txt
This filename is invalid because it starts with a space.

Enter input filename [enter for default: fileContainingEmails.txt]: ..txt
This filename is invalid because it starts with a period.

Enter input filename [enter for default: fileContainingEmails.txt]: file.xtx
This filename is invalid because it does not end with ".txt"

Enter input filename [enter for default: fileContainingEmails.txt]: *.txt
This filename is invalid because it contains a special character " * : < > ? / or |

Enter input filename [enter for default: fileContainingEmails.txt]: file.txt

Enter output filename [enter for default: file.txt]: (enter)

File name confirmation:
Input file: file.txt
Output file: file.txt